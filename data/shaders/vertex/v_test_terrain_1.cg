#version 430 core

in mat4 M;
in vec3 vertexModelspace;
in vec2 textureCoordsModelspace;
in vec3 normalModelspace;
in vec3 tangentModelspace;

out vec2 textureCoords;
out vec3 eyePosition;
out vec3 lightPosition;
out vec3 normalDirection;
out vec3 positionWorldspace;
out float fogVisibility;
out vec4 shadowCoords;
out mat3 toTangentSpace;
//out vec3 cameraPos;
//out float distance;

layout(binding=6) uniform sampler2D heightMap;

uniform mat4 MVP;
uniform vec3 lightPositionWorldspace;
uniform vec3 cameraPosition;
uniform float scale;
uniform float fogDensity;
uniform float fogGradient;
uniform vec4 clippingPlane;
uniform mat4 toShadowMapSpace;

const float shadowDistance = 10.0;
const float transitionDistance = 20.0;


// el height color es una normal (rgb) y un valor de altura en el alpha
void main()
{
	//cameraPos = cameraPosition;
	vec3 vertex = vertexModelspace;
	textureCoords = textureCoordsModelspace;

	vec4 color = texture(heightMap, textureCoordsModelspace);
	//vertex.y = color.a * scale;
	
	gl_Position =  MVP * vec4(vertex.xyz, 1.0f);

	positionWorldspace = vec3(M * vec4(vertex, 1.0f));

	shadowCoords = toShadowMapSpace * vec4(positionWorldspace, 1.0f);

	gl_ClipDistance[0] = dot(vec4(positionWorldspace, 1.0f), clippingPlane);

	vec3 positionRelativeToCamera = cameraPosition - positionWorldspace;
	
	vec3 N = normalize(vec3( M * vec4(normalModelspace, 0.0f) ));
	vec3 T = normalize(vec3( M * vec4(tangentModelspace, 0.0f) ));
	vec3 B = normalize(cross(N, T));

	toTangentSpace = transpose(mat3(T, B, N));

	//normalDirection = (color.rgb * 2.0f - 1.0f); 
	//normalDirection = vec3( M * vec4(normalDirection, 0.0f) );	
	
	//light
	lightPosition = lightPositionWorldspace;
	eyePosition = cameraPosition;
	
	//fog
	float distance = length(positionRelativeToCamera);
	fogVisibility = clamp(exp(-pow(distance * fogDensity, fogGradient)), 0.0f, 1.0f);

	//shadow
	distance = distance - (shadowDistance - transitionDistance);
	distance = distance / transitionDistance;
	shadowCoords.w = clamp(1.0 - distance, 0.0, 1.0);
}
