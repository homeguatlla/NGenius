#version 330 core

in mat4 M;
in vec3 vertexModelspace;
in vec2 textureCoordsModelspace;
in vec3 normalModelspace;
in vec3 tangentModelspace;
in ivec4 jointIndices;
in vec4 weights;

out vec2 textureCoords;
out vec3 eyeDirection;
out vec3 lightDirection;
out vec3 positionWorldspace;
out float fogVisibility;
out float distanceToCamera;

out vec3 normal;
out vec4 shadowCoords;

out vec4 in_color;

uniform mat4 V;
uniform mat4 P;
uniform vec3 lightPositionWorldspace;
uniform vec3 cameraPosition;
uniform float fogDensity;
uniform float fogGradient;
uniform float tile;
uniform mat4 toShadowMapSpace;
uniform vec4 clippingPlane;
uniform mat4 jointTransforms[50];

const float shadowDistance = 10.0;
const float transitionDistance = 20.0;

void main()
{
	textureCoords = tile * textureCoordsModelspace;
	
	vec4 totalLocalPos = vec4(0.0);
	vec4 totalNormal = vec4(0.0);
	for(int i = 0; i < 4; ++i)
	{
		if(jointIndices[i] != -1)
		{
			vec4 localPosition = jointTransforms[jointIndices[i]] * vec4(vertexModelspace, 1.0);
			totalLocalPos += localPosition * weights[i];
		
			vec4 worldNormal = jointTransforms[jointIndices[i]] * vec4(normalModelspace, 1.0);
			totalNormal += worldNormal * weights[i];
		}
	}

	in_color = vec4(0.0, 0.0, 0.0, 1.0);

	int jointIndex = 12;
	if(jointIndices[0] == jointIndex || jointIndices[1] == jointIndex || jointIndices[2] == jointIndex || jointIndices[3] == jointIndex)
	{
		in_color = vec4(weights[0], weights[1], weights[2], 1.0);
	}
	//totalLocalPos = vec4(vertexModelspace, 1.0);

	positionWorldspace = vec3(M * totalLocalPos);
	shadowCoords = toShadowMapSpace * vec4(positionWorldspace, 1.0f);

	gl_ClipDistance[0] = dot(vec4(positionWorldspace, 1.0), clippingPlane);

	vec4 positionRelativeToCamera = V * vec4(positionWorldspace, 1.0f);	
	gl_Position =  P * positionRelativeToCamera;
	
	normal = normalize(vec3( M * totalNormal));
	
	lightDirection = normalize(lightPositionWorldspace - positionWorldspace);
	eyeDirection = normalize(cameraPosition - positionWorldspace);

	//fog
	distanceToCamera = length(positionRelativeToCamera);
	fogVisibility = clamp(exp(-pow(distanceToCamera * fogDensity, fogGradient)), 0.0, 1.0);

	//shadow
	float distance = distanceToCamera - (shadowDistance - transitionDistance);
	distance = distance / transitionDistance;
	shadowCoords.w = clamp(1.0 - distance, 0.0, 1.0);
}
