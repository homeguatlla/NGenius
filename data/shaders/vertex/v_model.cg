#version 330 core

in vec3 vertexModelspace;
in vec2 textureCoordsModelspace;
in vec3 normalModelspace;
in vec3 tangentModelspace;
in mat4 M;

out vec2 textureCoords;
out vec3 eyeDirection;
out vec3 lightDirection;
out vec3 positionWorldspace;
out float fogVisibility;

out vec3 normal;
out vec4 shadowCoords;

uniform mat4 V;
uniform mat4 P;
uniform vec3 lightPositionWorldspace;
uniform vec3 cameraPosition;
uniform float fogDensity;
uniform float fogGradient;
uniform float tile;
uniform mat4 toShadowMapSpace;

const float shadowDistance = 10.0;
const float transitionDistance = 20.0;

void main()
{
	textureCoords = tile * textureCoordsModelspace;
	
	positionWorldspace = vec3(M * vec4(vertexModelspace, 1.0));
	shadowCoords = toShadowMapSpace * vec4(positionWorldspace, 1.0f);

	vec4 positionRelativeToCamera = V * vec4(positionWorldspace, 1.0f);	
	gl_Position =  P * positionRelativeToCamera;
	
	normal = normalize(vec3( M * vec4(normalModelspace, 0.0f) ));
	
	lightDirection = normalize(lightPositionWorldspace - positionWorldspace);
	eyeDirection = normalize(cameraPosition - positionWorldspace);

	//fog
	float distance = length(positionRelativeToCamera);
	fogVisibility = clamp(exp(-pow(distance * fogDensity, fogGradient)), 0.0, 1.0);

	//shadow
	distance = distance - (shadowDistance - transitionDistance);
	distance = distance / transitionDistance;
	shadowCoords.w = clamp(1.0 - distance, 0.0, 1.0);
}
