#version 330 core

layout(points) in;
in float rotationY[];
in float scale[];

layout(triangle_strip, max_vertices = 10) out;
out vec2 textureCoords;
out float fogVisibility;
out vec4 shadowCoords;
out vec4 outColor;
out float alphaFactor;
out vec3 eyeDirection;
out vec3 lightDirection;

uniform mat4 P;
uniform mat4 V;
uniform float tile;

uniform float fogDensity;
uniform float fogGradient;
uniform vec2 size;

uniform vec3 lightPositionWorldspace;
uniform vec3 cameraPosition;

uniform vec4 clippingPlane;

uniform mat4 toShadowMapSpace;

uniform float timer;
uniform sampler2D textureWind;
uniform vec3 windModificators[1];

const float shadowDistance = 10.0;
const float transitionDistance = 20.0;
const float AFFECTED_BY_WIND_RADIUS = 10.0;
const float FAR_DISTANCE_CLIPPING = 10.0;
const float FOG_DENSITY_MULTIPLIER = 0.2;
const float PATCH_SIZE = 10.0f; //debería venir como un uniform


void createVertex(vec3 offset, vec2 coordText)
{
	vec4 actualOffset = vec4(offset, 0.0);
	vec4 worldPosition = (gl_in[0].gl_Position + actualOffset);
	shadowCoords = toShadowMapSpace * worldPosition;
	vec4 positionRelativeToCamera = V * worldPosition;
	gl_Position = P * positionRelativeToCamera;

	gl_ClipDistance[0] = dot(worldPosition, clippingPlane);

	//texture
	textureCoords = vec2(coordText.x, coordText.y) * vec2(tile, tile);

	//fog
	float distance = length(positionRelativeToCamera);
	fogVisibility = clamp(exp(-pow(distance * fogDensity, fogGradient)), 0.0, 1.0);

	//shadow
	distance = distance - (shadowDistance - transitionDistance);
	distance = distance / transitionDistance;
	shadowCoords.w = clamp(1.0 - distance, 0.0, 1.0);
	
	//camera data
	lightDirection = normalize(lightPositionWorldspace);
	eyeDirection = normalize(cameraPosition - worldPosition.xyz);

	EmitVertex();
}

vec3 calculateWindVector(float patchSize)
{
	vec2 coord = vec2(gl_in[0].gl_Position.x, gl_in[0].gl_Position.z) + vec2(patchSize * 0.5, patchSize * 0.5);
	coord = coord * 1.0 / patchSize;
	vec2 coord1 = coord * vec2(cos(timer + 4), sin(timer * 3 + 10));

	vec3 wind1 = texture2D(textureWind, coord1).bgr * 2.0 - 1.0;
	vec3 wind2 = texture2D(textureWind, coord1.yx).bgr * 2.0 - 1.0;
	vec3 wind = wind1 * 0.7 - wind2 * 0.25;
	wind.y = 0.8;

	wind = normalize(wind);
	return wind;
}

vec3 calculateModificatorsWindVector()
{
	bool modified = false;
	vec3 modification = vec3(0.0, 0.0, 0.0);

	for(int modificator = 0; modificator < 1; modificator++)
	{
		vec3 direction = gl_in[0].gl_Position.xyz -  windModificators[modificator];
		float distance = length(direction);
		if(distance < 0.2)
		{
			modification += (direction * 10.0 / distance);
			modified = true;
		}
	}
	if(modified)
	{
		modification = normalize(modification);
	}
	modification.y = max(0.0, modification.y);
	return modification;
}

vec3 toBezier(float delta, vec3 P0, vec3 P1, vec3 P2, vec3 P3)
{
    float t = delta;
    float t2 = t * t;
    float one_minus_t = 1.0 - t;
    float one_minus_t2 = one_minus_t * one_minus_t;
    return (P0 * one_minus_t2 * one_minus_t + P1 * 3.0 * t * one_minus_t2 + P2 * 3.0 * t2 * one_minus_t + P3 * t2 * t);
}

void main()
{
	vec4 positionRelativeToCamera = V * gl_in[0].gl_Position;
	float distance = length(positionRelativeToCamera);
	//clipping
	if(distance < 0.0 || distance > FAR_DISTANCE_CLIPPING)
	{
		//outColor = vec4(0,0,1,1);
				return;
	}

	float x = size.x * 0.5 * scale[0];
	float h = size.y * 0.5 * scale[0];
	
	float angle = rotationY[0];
	float s = sin(angle);
	float c = cos(angle);

	float xr = -x * c;
	float zr = -x * s;
	float xr2 = -xr;
	float zr2 = -zr;

	vec3 newWind = vec3(1.0, 1.0, 0.0);
	
	if(distance < AFFECTED_BY_WIND_RADIUS)
	{
		newWind = calculateWindVector(PATCH_SIZE);
		newWind += calculateModificatorsWindVector();
		//newWind *= h;
		//outColor = vec4(newWind.x,newWind.y,newWind.z,1);
	}
	else
	{
		//outColor = vec4(1,0,0,1);
	}
	
	
	alphaFactor = clamp(exp(-pow(distance * FOG_DENSITY_MULTIPLIER, fogGradient)), 0.0, 1.0);

	vec3 dif = vec3(0.0, newWind.y, 0.0) - newWind;
	vec3 controlPoints[4];
	controlPoints[0] = vec3(0.0);
	controlPoints[1] = newWind + dif * 0.75;
	controlPoints[1].y = newWind.y / 2.0;
	controlPoints[2] = newWind + dif * 0.5;
	controlPoints[2].y = controlPoints[1].y + newWind.y / 4.0;
	controlPoints[3] = newWind;

	for(int c = 0; c <= 5; c++)
	{
		vec3 wind = toBezier(c/5.0, controlPoints[0], controlPoints[1], controlPoints[2], controlPoints[3]);
		createVertex(vec3(xr, 0.0, zr) + wind * h, vec2(0.0, wind.y / newWind.y));
		createVertex(vec3(xr2, 0.0, zr2) + wind * h, vec2(1.0, wind.y / newWind.y));
	}
	EndPrimitive();
}