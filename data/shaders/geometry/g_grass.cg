#version 330 core

layout(points) in;
in mat4 Mout[];
in float rotationY[];
in float scale[];

layout(triangle_strip, max_vertices = 8) out;
out vec2 textureCoords;
out float fogVisibility;
out vec4 shadowCoords;
out vec4 outColor;
out float alphaFactor;

uniform mat4 P;
uniform mat4 V;
uniform float tile;

uniform float fogDensity;
uniform float fogGradient;
uniform vec2 size;

uniform vec4 clippingPlane;

uniform mat4 toShadowMapSpace;

uniform float timer;
uniform sampler2D textureWind;
uniform vec3 windModificators[1];

const float shadowDistance = 10.0;
const float transitionDistance = 20.0;
const float AFFECTED_BY_WIND_RADIUS = 10.0;
const float FAR_DISTANCE_CLIPPING = 10.0;
const float FOG_DENSITY_MULTIPLIER = 0.2;
const float PATCH_SIZE = 50.0f; //debería venir como un uniform


void createVertex(vec3 offset, vec2 coordText)
{
	vec4 actualOffset = vec4(offset, 0.0);
	vec4 worldPosition = (gl_in[0].gl_Position + actualOffset);
	vec4 positionWorldspace = Mout[0] * worldPosition;
	shadowCoords = toShadowMapSpace * positionWorldspace;
	vec4 positionRelativeToCamera = V * positionWorldspace;
	gl_Position = P * positionRelativeToCamera;

	gl_ClipDistance[0] = dot(positionWorldspace, clippingPlane);

	//texture
	textureCoords = vec2(coordText.x, coordText.y) * vec2(tile, tile);

	//fog
	float distance = length(positionRelativeToCamera);
	fogVisibility = clamp(exp(-pow(distance * fogDensity, fogGradient)), 0.0, 1.0);

	//shadow
	distance = distance - (shadowDistance - transitionDistance);
	distance = distance / transitionDistance;
	shadowCoords.w = clamp(1.0 - distance, 0.0, 1.0);

	EmitVertex();
}

vec3 calculateWindVector(float patchSize)
{
	vec2 coord = vec2(gl_in[0].gl_Position.x, gl_in[0].gl_Position.z) + vec2(patchSize * 0.5, patchSize * 0.5);
	coord = coord * 1.0 / patchSize;
	coord = coord * vec2(cos(timer + 4), sin(timer * 3 + 10));

	vec3 wind = texture2D(textureWind, coord).bgr * 2.0 - 1.0;
	//wind.x = min(max(-0.3, wind.x), 0.3);
	//wind.z = min(max(-0.3, wind.z), 0.3);
	wind.y = 0.8;
	wind = normalize(wind);
	return wind;
}

vec3 calculateModificatorsWindVector()
{
	bool modified = false;
	vec3 modification = vec3(0.0, 0.0, 0.0);

	for(int modificator = 0; modificator < 1; modificator++)
	{
		vec3 direction = gl_in[0].gl_Position.xyz -  windModificators[modificator];
		float distance = length(direction);
		if(distance < 0.2)
		{
			modification += (direction * 10.0 / distance);
			modified = true;
		}
	}
	if(modified)
	{
		modification = normalize(modification);
	}
	modification.y = max(0.0, modification.y);
	return modification;
}

void main()
{
	vec4 positionRelativeToCamera = V * Mout[0] * gl_in[0].gl_Position;
	float distance = length(positionRelativeToCamera);
	//clipping
	if(distance < 0.0 || distance > FAR_DISTANCE_CLIPPING)
	{
		//outColor = vec4(0,0,1,1);
				return;
	}

	float x = size.x * 0.5 * scale[0];
	float h = size.y * 0.5 * scale[0];
	
	float angle = rotationY[0];
	float s = sin(angle);
	float c = cos(angle);

	float xr = -x * c;
	float zr = -x * s;
	float xr2 = -xr;
	float zr2 = -zr;

	vec3 newWind = vec3(0.0, 1.0, 0.0) * h;
	
	if(distance < AFFECTED_BY_WIND_RADIUS)
	{
		newWind = calculateWindVector(PATCH_SIZE);
		newWind += calculateModificatorsWindVector();
		newWind *= h;
		//outColor = vec4(newWind.x,newWind.y,newWind.z,1);
	}
	else
	{
		//outColor = vec4(1,0,0,1);
	}
	
	
	alphaFactor = clamp(exp(-pow(distance * FOG_DENSITY_MULTIPLIER, fogGradient)), 0.0, 1.0);

	createVertex(vec3(xr, 0.0, zr) + newWind, vec2(0.0, 1.0));
	createVertex(vec3(xr, 0.0, zr), vec2(0.0, 0.0));
	createVertex(vec3(xr2, 0.0, zr2) + newWind, vec2(1.0, 1.0));
	createVertex(vec3(xr2, 0.0, zr2), vec2(1.0, 0.0));
	
	EndPrimitive();	
	
	createVertex(vec3(zr, 0.0, xr2) + newWind, vec2(0.0, 1.0));
	createVertex(vec3(zr, 0.0, xr2), vec2(0.0, 0.0));
	createVertex(vec3(zr2, 0.0, xr) + newWind, vec2(1.0, 1.0));
	createVertex(vec3(zr2, 0.0, xr), vec2(1.0, 0.0));
	
	EndPrimitive();
}