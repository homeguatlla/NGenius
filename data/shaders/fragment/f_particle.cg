#version 430 core

in vec2 textureCoords;
in vec4 luminiscence;
//in float fogVisibility;
//in vec4 clipSpace;

layout(binding=3) uniform sampler2D texture;
layout(binding=25) uniform sampler2D depthTexture;
uniform vec3 fogColor;
uniform float tile;
uniform vec2 screenSize;

out vec4 color;

/*
vec4 ApplyFog(vec4 color)
{
	return mix(vec4(fogColor, color.a), color, fogVisibility);
}
*/

float ApplySoftParticle(float alphaColor)
{
	float near = 0.1;
	float far = 1000.0f;
	
	//calculate the depth texture value from the pixel we are rendering (the depth texture is a texture of 1024 x 768)	
	float depth = texture(depthTexture, vec2(gl_FragCoord.x, gl_FragCoord.y) * 1.0/screenSize).r;
	float floorDistance = 2.0 * near * far /( far + near - (2.0 * depth - 1.0) * (far - near));
	
	depth = gl_FragCoord.z;
	float particleDistance = 2.0 * near * far /( far + near - (2.0 * depth - 1.0) * (far - near));
	float particleDepth = clamp((floorDistance - particleDistance)/20.0, 0.0, 1.0);

	float limit = 0.01;
	if(particleDepth > 0.0 && particleDepth < limit)
	{
		alphaColor = mix(0.0, alphaColor, particleDepth / limit);
	}
	return alphaColor;
}

void main()
{	
	//vec2 ndc = (clipSpace.xy / clipSpace.w) / 2.0 + 0.5;
	
	vec4 textureColor = texture(texture, textureCoords * tile);
	color = (textureColor + vec4(luminiscence.r, luminiscence.g, luminiscence.b, textureColor.a) )* luminiscence.a;
	color.a = ApplySoftParticle(color.a);

	//color = ApplyFog(color);
}

