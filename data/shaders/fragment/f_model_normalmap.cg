#version 430 core

in vec2 textureCoords;
in vec3 eyeDirection;
in vec3 lightDirection;
in vec3 positionWorldspace;
in float fogVisibility;
in vec4 shadowCoords;
//in vec3 lightPosition;

in vec3 normal;
in float distanceToCamera;

layout(binding=3) uniform sampler2D texture;
layout(binding=4) uniform sampler2D normalmap;
uniform vec3 fogColor;
layout(binding=20) uniform sampler2D shadowMap;
uniform int shadowMapSize;
uniform int pfcCount;
out vec4 color;
uniform vec3 lightColor;


float totalTexelsShadow = (pfcCount * 2.0 + 1.0) * (pfcCount * 2.0 + 1.0);
const float FAR_DISTANCE_CLIPPING = 150.0;

vec4 ApplyLight(vec3 ambient, vec3 materialDiffuse, vec3 materialSpecular)
{
	float specularStrength = 0.3f;
	vec3 n = normalize(texture2D(normalmap, textureCoords).rgb * 2.0 - 1.0);
	//n = normalize(cross(dFdx(positionWorldspace), dFdy(positionWorldspace)));
	
	vec3 l = -lightDirection;
	float cosTheta =  max(0.0, dot(n, l));
	vec3 diffuse = materialDiffuse * cosTheta;
	
	vec3 reflectDir = reflect(-l, n);	
	vec3 specular = materialSpecular * specularStrength * pow(max(dot(reflectDir, normalize(eyeDirection)), 0.0),8);
	//float attenuation = length(lightPosition - positionWorldspace);

	color.rgb = lightColor * (ambient * materialDiffuse + (diffuse + specular));// * (1.0f / attenuation);
	color.a = 1.0f;

	return color;
}

vec4 ApplyFog(vec4 color)
{
	return mix(vec4(fogColor, 1.0f), color, fogVisibility);
}

float ApplyShadow(int pfcCount, float totalTexels)
{
	float texelSize = 1.0 / shadowMapSize;
	float total = 0.0f;
	float bias = 0.001;

	for(int x = -pfcCount; x <= pfcCount; x++) {
		for(int y = -pfcCount; y <= pfcCount; y++) {
			float objectNearestLight = texture2D(shadowMap, shadowCoords.xy + vec2(x, y) * texelSize).r;
			total += step(objectNearestLight, shadowCoords.z - bias);
			/*if(objectNearestLight < shadowCoords.z - bias)
			{
				total += 1.0;
			}*/
		}
	}
	total /= totalTexelsShadow;
	float shadowFactor = 1.0 - (total * shadowCoords.w);

	return shadowFactor;
}

void main()
{
	if(distanceToCamera < 0.0 || distanceToCamera > FAR_DISTANCE_CLIPPING)
	{
		discard;
	}
	// Material properties
	float shadowFactor = ApplyShadow(pfcCount, totalTexelsShadow);
	vec4 MaterialDiffuseColor = shadowFactor * texture2D(texture, textureCoords);

	if(MaterialDiffuseColor.a < 0.5)
	{
		discard;
	}

	vec3 MaterialAmbientColor = vec3(0.3f, 0.3f, 0.3f);
	vec3 MaterialSpecularColor = vec3(1.0f, 1.0f, 1.0f);
	color = ApplyLight(MaterialAmbientColor, MaterialDiffuseColor.rgb, MaterialSpecularColor);
	color = ApplyFog(color);
}

