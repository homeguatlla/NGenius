#version 430 core

in vec2 textureCoords;
in vec3 eyeDirection;
in vec3 lightDirection;
in vec3 positionWorldspace;
in float fogVisibility;
in vec4 shadowCoords;
//in vec3 lightPosition;

in vec3 normal;
in float distanceToCamera;


layout(binding=3) uniform sampler2D texture;
uniform vec3 fogColor;
layout(binding=20) uniform sampler2D shadowMap;
uniform int shadowMapSize;
uniform int pfcCount;
uniform vec3 lightColor;
uniform vec3 color;

float totalTexelsShadow = (pfcCount * 2.0 + 1.0) * (pfcCount * 2.0 + 1.0);
const float FAR_DISTANCE_CLIPPING = 150.0;
out vec4 out_color;

vec4 ApplyLight(vec3 ambient, vec3 materialDiffuse, vec3 materialSpecular)
{
	float specularStrength = 0.01;
	
	//n = normalize(cross(dFdx(positionWorldspace), dFdy(positionWorldspace)));
	
	vec3 l = -lightDirection;
	vec3 diffuse = materialDiffuse * max(0.0, dot(normal, l));
	
	vec3 reflectDir = reflect(-l, normal);	
	vec3 specular = materialSpecular * specularStrength * pow(max(dot(reflectDir, normalize(eyeDirection)), 0.0), 32);
	
	//float attenuation = length(lightPosition - positionWorldspace);

	vec4 color;
	color.rgb = lightColor * (ambient * materialDiffuse + (diffuse + specular));// * (1.0f / attenuation);
	color.a = 1.0f;
	
	return color;
}

vec4 ApplyFog(vec4 color)
{
	return mix(vec4(fogColor, 1.0f), color, fogVisibility);
}

float ApplyShadow(int pfcCount, float totalTexels)
{
	float texelSize = 1.0 / shadowMapSize;
	float total = 0.0f;
	float bias = 0.001;

	for(int x = -pfcCount; x <= pfcCount; x++) {
		for(int y = -pfcCount; y <= pfcCount; y++) {
			float objectNearestLight = texture2D(shadowMap, shadowCoords.xy + vec2(x, y) * texelSize).r;

			total += step(objectNearestLight, shadowCoords.z - bias);
			/*if(objectNearestLight < shadowCoords.z - bias)
			{
				total += 1.0;
			}*/
		}
	}
	total /= totalTexelsShadow;
	float shadowFactor = 1.0 - (total * shadowCoords.w);

	return shadowFactor;
}

void main()
{
	if(distanceToCamera < 0.0 || distanceToCamera > FAR_DISTANCE_CLIPPING)
	{
		discard;
	}

	// Material properties
	float shadowFactor = ApplyShadow(pfcCount, totalTexelsShadow);
	vec4 MaterialDiffuseColor = shadowFactor * texture2D(texture, textureCoords) * vec4(color, 1.0f);
	
	if(MaterialDiffuseColor.a < 0.5)
	{
		discard;
	}

	vec3 MaterialAmbientColor = vec3(0.5f, 0.5f, 0.5f);
	vec3 MaterialSpecularColor = vec3(1.0f, 1.0f, 1.0f);
	out_color = ApplyLight(MaterialAmbientColor, MaterialDiffuseColor.rgb, MaterialSpecularColor);
	out_color = ApplyFog(out_color);
	//out_color = MaterialDiffuseColor;
	//out_color = vec4(1.0, 0.0, 0.0, 1.0);
}

