#version 330 core

in vec2 textureCoords;
in vec4 shadowCoords;
in float fogVisibility;
in vec3 eyeDirection;
in vec3 lightDirection;

uniform sampler2D texture;
uniform vec3 fogColor;

uniform sampler2D shadowMap;
uniform sampler2D depthTexture;
uniform int shadowMapSize;
uniform int pfcCount;
uniform vec2 screenSize;
uniform vec3 lightColor;

in vec4 outColor;
in float alphaFactor;
out vec4 color;

float totalTexelsShadow = (pfcCount * 2.0 + 1.0) * (pfcCount * 2.0 + 1.0);

float ApplyShadow(int pfcCount, float totalTexels)
{
	float texelSize = 1.0 / shadowMapSize;
	float total = 0.0f;
	float bias = 0.001;

	for(int x = -pfcCount; x <= pfcCount; x++) {
		for(int y = -pfcCount; y <= pfcCount; y++) {
			float objectNearestLight = texture2D(shadowMap, shadowCoords.xy + vec2(x, y) * texelSize).r;

			total += step(objectNearestLight, shadowCoords.z - bias);
			/*if(objectNearestLight < shadowCoords.z - bias)
			{
				total += 1.0;
			}*/
		}
	}
	total /= totalTexelsShadow;
	float shadowFactor = 1.0 - (total * shadowCoords.w);

	return shadowFactor;
}

float ApplySoftParticle(float alphaColor)
{
	float near = 0.1;
	float far = 1000.0f;
	
	//calculate the depth texture value from the pixel we are rendering (the depth texture is a texture of 1024 x 768)	
	float depth = texture2D(depthTexture, vec2(gl_FragCoord.x, gl_FragCoord.y) * 1.0/screenSize).r;
	float floorDistance = 2.0 * near * far /( far + near - (2.0 * depth - 1.0) * (far - near));
	
	depth = gl_FragCoord.z;
	float particleDistance = 2.0 * near * far /( far + near - (2.0 * depth - 1.0) * (far - near));
	float particleDepth = clamp((floorDistance - particleDistance)/20.0, 0.0, 1.0);

	float limit = 0.01;
	if(particleDepth > -0.001 && particleDepth < limit)
	{
		alphaColor = mix(0.0, alphaColor, particleDepth / limit);
	}
	return alphaColor;
}

vec4 ApplyLight(vec3 ambient, vec3 materialDiffuse)
{
	vec3 l = -lightDirection;
	vec3 diffuse = materialDiffuse * 1.0 - max(0.0, dot(eyeDirection, l));
	
	color.rgb = lightColor * (ambient * materialDiffuse + diffuse );
	color.a = 1.0f;
	
	return color;
}


vec4 ApplyFog(vec4 color)
{
	return mix(vec4(fogColor, 1.0f), color, fogVisibility);
}

void main()
{
	float shadowFactor = ApplyShadow(pfcCount, totalTexelsShadow);
	vec4 MaterialDiffuseColor = shadowFactor * texture2D(texture, textureCoords);

	if(MaterialDiffuseColor.a < 0.5)
	{
		discard;
	}
	vec3 MaterialAmbientColor = vec3(0.1f, 0.1f, 0.1f);
	
	color = ApplyLight(MaterialAmbientColor, MaterialDiffuseColor.rgb);
	color = ApplyFog(color);
	//color.a = ApplySoftParticle(color.a);
	color.a *= textureCoords.y * 2.0 * alphaFactor;
	//color.rgb = MaterialDiffuseColor.rgb;
}